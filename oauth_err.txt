prisma:query db.Account.aggregate([ { $match: { $expr: { $and: [ { $and: [ { $and: [ { $eq: [ "$provider", { $literal: "google", }, ], }, { $ne: [ "$provider", "$$REMOVE", ], }, ], }, { $and: [ { $eq: [ "$providerAccountId", { $literal: "111847370923928446917", }, ], }, { $ne: [ "$providerAccountId", "$$REMOVE", ], }, ], }, ], }, ], }, }, }, { $project: { _id: 1, userId: 1, }, }, ])
[next-auth][error][adapter_error_getUserByAccount] 
https://next-auth.js.org/errors#adapter_error_getuserbyaccount 
Invalid `p.account.findUnique()` invocation in
/Users/Skylar.Gilfeather/Computer Science/TheLegacyProject/node_modules/@next-auth/prisma-adapter/dist/index.js:11:45

   8 getUserByEmail: (email) => p.user.findUnique({ where: { email } }),
   9 async getUserByAccount(provider_providerAccountId) {
  10     var _a;
→ 11     const account = await p.account.findUnique(
Error occurred during query execution:
ConnectorError(ConnectorError { user_facing_error: None, kind: AuthenticationFailed { user: "SCRAM failure: Authentication failed." } }) {
  message: '\n' +
    'Invalid `p.account.findUnique()` invocation in\n' +
    '/Users/Skylar.Gilfeather/Computer Science/TheLegacyProject/node_modules/@next-auth/prisma-adapter/dist/index.js:11:45\n' +
    '\n' +
    '   8 getUserByEmail: (email) => p.user.findUnique({ where: { email } }),\n' +
    '   9 async getUserByAccount(provider_providerAccountId) {\n' +
    '  10     var _a;\n' +
    '→ 11     const account = await p.account.findUnique(\n' +
    'Error occurred during query execution:\n' +
    'ConnectorError(ConnectorError { user_facing_error: None, kind: AuthenticationFailed { user: "SCRAM failure: Authentication failed." } })',
  stack: 'Error: \n' +
    'Invalid `p.account.findUnique()` invocation in\n' +
    '/Users/Skylar.Gilfeather/Computer Science/TheLegacyProject/node_modules/@next-auth/prisma-adapter/dist/index.js:11:45\n' +
    '\n' +
    '   8 getUserByEmail: (email) => p.user.findUnique({ where: { email } }),\n' +
    '   9 async getUserByAccount(provider_providerAccountId) {\n' +
    '  10     var _a;\n' +
    '→ 11     const account = await p.account.findUnique(\n' +
    'Error occurred during query execution:\n' +
    'ConnectorError(ConnectorError { user_facing_error: None, kind: AuthenticationFailed { user: "SCRAM failure: Authentication failed." } })\n' +
    '    at RequestHandler.handleRequestError (/Users/Skylar.Gilfeather/Computer Science/TheLegacyProject/node_modules/@prisma/client/runtime/index.js:30855:13)\n' +
    '    at RequestHandler.request (/Users/Skylar.Gilfeather/Computer Science/TheLegacyProject/node_modules/@prisma/client/runtime/index.js:30834:12)\n' +
    '    at async PrismaClient._request (/Users/Skylar.Gilfeather/Computer Science/TheLegacyProject/node_modules/@prisma/client/runtime/index.js:31812:16)\n' +
    '    at async getUserByAccount (/Users/Skylar.Gilfeather/Computer Science/TheLegacyProject/node_modules/@next-auth/prisma-adapter/dist/index.js:11:29)',
  name: 'Error'
}
[next-auth][error][OAUTH_CALLBACK_HANDLER_ERROR] 
https://next-auth.js.org/errors#oauth_callback_handler_error 
Invalid `p.account.findUnique()` invocation in
/Users/Skylar.Gilfeather/Computer Science/TheLegacyProject/node_modules/@next-auth/prisma-adapter/dist/index.js:11:45

   8 getUserByEmail: (email) => p.user.findUnique({ where: { email } }),
   9 async getUserByAccount(provider_providerAccountId) {
  10     var _a;
→ 11     const account = await p.account.findUnique(
Error occurred during query execution:
ConnectorError(ConnectorError { user_facing_error: None, kind: AuthenticationFailed { user: "SCRAM failure: Authentication failed." } }) Error: 
Invalid `p.account.findUnique()` invocation in
/Users/Skylar.Gilfeather/Computer Science/TheLegacyProject/node_modules/@next-auth/prisma-adapter/dist/index.js:11:45

   8 getUserByEmail: (email) => p.user.findUnique({ where: { email } }),
   9 async getUserByAccount(provider_providerAccountId) {
  10     var _a;
→ 11     const account = await p.account.findUnique(
Error occurred during query execution:
ConnectorError(ConnectorError { user_facing_error: None, kind: AuthenticationFailed { user: "SCRAM failure: Authentication failed." } })
    at RequestHandler.handleRequestError (/Users/Skylar.Gilfeather/Computer Science/TheLegacyProject/node_modules/@prisma/client/runtime/index.js:30855:13)
    at RequestHandler.request (/Users/Skylar.Gilfeather/Computer Science/TheLegacyProject/node_modules/@prisma/client/runtime/index.js:30834:12)
    at async PrismaClient._request (/Users/Skylar.Gilfeather/Computer Science/TheLegacyProject/node_modules/@prisma/client/runtime/index.js:31812:16)
    at async getUserByAccount (/Users/Skylar.Gilfeather/Computer Science/TheLegacyProject/node_modules/@next-auth/prisma-adapter/dist/index.js:11:29) {
  name: 'GetUserByAccountError',
  code: undefined
}
