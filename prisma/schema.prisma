// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                 String  @id @default(auto()) @map("_id") @db.ObjectId
    userId             String  @db.ObjectId
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String? @db.String
    access_token       String? @db.String

    // Unix timestamp
    // @todo(nickbar01234) - I actually couldn't find a document that said this definitely, but this assumption made 
    // sense if you convert the value to regular time 
    expires_at         Int?

    token_type         String?
    scope              String?
    id_token           String? @db.String
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    // @deprecated Pending for removal when we expand to multiple universities
    admin         Boolean   @default(false)
    role          Role      @default(USER)

    Account       Account[]
    Session       Session[]
    SeniorIDs     String[]  @db.ObjectId
    Seniors       Senior[]  @relation(fields: [SeniorIDs], references: [id])
    approved      Approval  @default(PENDING)
}

enum Approval {
    PENDING
    APPROVED
    DENIED
}

enum Role {
    USER
    CHAPTER_LEADER
    ADMIN
}

model Senior {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    location    String
    description String
    StudentIDs  String[] @db.ObjectId
    Students    User[]   @relation(fields: [StudentIDs], references: [id])
    folder      String
    Files       File[]
}

model File {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    description  String
    filetype     String
    lastModified DateTime
    url          String
    seniorId     String   @db.ObjectId
    senior       Senior   @relation(fields: [seniorId], references: [id])
    Tags         String[]
}

model ChapterRequest {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  approved             Approval  @default(PENDING)
  firstName            String
  lastName             String
  universityEmail      String    @unique
  phoneNumber          String
  university           String
  universityAddress    String
  leadershipExperience String
  motivation           String
  availabilities       String
  questions            String
}
 