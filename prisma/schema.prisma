// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                 String  @id @default(cuid()) @map("_id")
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    Account       Account[]
    Session       Session[]
    admin         Boolean   @default(false)
    seniorIDs     String[]  
    seniors       Senior[]  @relation(fields: [seniorIDs], references: [id])
}

model Senior {
    id            String    @id @default(cuid()) @map("_id")
    name          String
    location      String
    biography     String
    photo         String
    studentIDs    String[]  
    students      User[]    @relation(fields: [studentIDs], references: [id])
}

model Senior {
    id   String @id @default(cuid()) @map("_id")
    File File[]
    Tag  Tag[]
}

model File {
    id       String @id @default(cuid()) @map("_id")
    name     String
    filetype String
    url      String
    senior   Senior @relation(fields: [seniorId], references: [id])
    seniorId String
}

model Tag {
    id       String @id @default(cuid()) @map("_id")
    name     String
    pos      Float
    color    String // storing color as a string since it will need to be a string when injected into CSS later on
    senior   Senior @relation(fields: [seniorId], references: [id])
    seniorId String
}
