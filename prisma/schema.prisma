// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String

  // Unix timestamp
  // @todo(nickbar01234) - I actually couldn't find a document that said this definitely, but this assumption made 
  // sense if you convert the value to regular time 
  expires_at Int?

  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // https://github.com/nextauthjs/next-auth/blob/v4/packages/next-auth/src/providers/google.ts
  // Fields mappable from PrismaAdapter. We can map the value return from profle() in [...nextauth].
  name          String?
  firstName     String    @default("") @map("given_name")
  lastName      String    @default("") @map("family_name")
  pronouns      String    @default("")
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  position      String    @default("")

  // @deprecated Pending for removal when we expand to multiple universities
  admin Boolean @default(false)
  role  Role    @default(USER)

  Account   Account[]
  Session   Session[]
  SeniorIDs String[]  @db.ObjectId
  Seniors   Senior[]  @relation(fields: [SeniorIDs], references: [id])
  approved  Approval  @default(PENDING)
  ChapterID String?   @db.ObjectId
  Chapter   Chapter?  @relation(fields: [ChapterID], references: [id])
  
  userRequest UserRequest?
}

enum Approval {
  PENDING
  APPROVED
  DENIED
}

enum Role {
  USER
  CHAPTER_LEADER
  ADMIN
}

model Senior {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firstname   String
  lastname    String
  location    String
  description String
  StudentIDs  String[] @db.ObjectId
  Students    User[]   @relation(fields: [StudentIDs], references: [id])
  folder      String   @default("")
  Files       File[]
  ChapterID   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [ChapterID], references: [id])
}

model File {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  date     DateTime // will zero out the hours
  filetype String
  url      String
  seniorId String   @db.ObjectId
  senior   Senior   @relation(fields: [seniorId], references: [id], onDelete: Cascade)
  Tags     String[]

  @@unique([seniorId, date])
}

model ChapterRequest {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  // ChapterRequest can only be in pending or accepted state. We don't use DENIED.
  approved             Approval @default(PENDING)
  firstName            String
  lastName             String
  universityEmail      String   @unique
  phoneNumber          String
  university           String
  universityAddress    String
  leadershipExperience String
  motivation           String
  availabilities       String
  questions            String
}

model Chapter {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  chapterName   String
  location      String
  chapterFolder String   @default("")
  dateCreated   DateTime @default(now())
  students      User[]
  seniors       Senior[]
}

model Resource {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  access Role[]
  link   String
  title  String
}

model Email {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
}

model UserRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  // @deprecated - We ended up not using this anywhere
  approved  Approval @default(PENDING)
  uid       String   @unique @db.ObjectId
  chapterId String   @db.ObjectId
  user      User     @relation(fields: [uid], references: [id])
}
